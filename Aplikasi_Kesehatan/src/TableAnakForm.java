/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import java.sql.Statement;
import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.sql.DriverManager;
import java.util.HashMap;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.view.JasperViewer;
import net.sf.jasperreports.engine.JRResultSetDataSource;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;

/**
 *
 * @author ASUS
 */
public class TableAnakForm extends javax.swing.JInternalFrame {
    
    /**
     * Creates new form DataForm
     */
    String sql = "select * from anak";
    
    public TableAnakForm() {       
            initComponents();
            showTable(sql);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TabelDataAnak_tab = new javax.swing.JTable();
        KembaliMenu_bt = new javax.swing.JButton();
        cari_txt = new javax.swing.JTextField();
        cari_bt = new javax.swing.JButton();
        delete_bt = new javax.swing.JButton();
        clear_bt = new javax.swing.JButton();
        Print_bt = new javax.swing.JButton();
        Update_bt = new javax.swing.JButton();

        TabelDataAnak_tab.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        TabelDataAnak_tab.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nama Anak", "NIK", "Umur (Bulan)", "Tanggal Lahir", "Bapak", "Ibu", "Alamat", "Jenis Kelamin", "Riwayat Imunisasi"
            }
        ));
        TabelDataAnak_tab.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setViewportView(TabelDataAnak_tab);

        KembaliMenu_bt.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        KembaliMenu_bt.setText("KEMBALI");
        KembaliMenu_bt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KembaliMenu_btActionPerformed(evt);
            }
        });

        cari_bt.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        cari_bt.setText("CARI");
        cari_bt.setPreferredSize(new java.awt.Dimension(75, 25));
        cari_bt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cari_btActionPerformed(evt);
            }
        });

        delete_bt.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        delete_bt.setText("DELETE");
        delete_bt.setPreferredSize(new java.awt.Dimension(75, 71));
        delete_bt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete_btActionPerformed(evt);
            }
        });

        clear_bt.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        clear_bt.setText("CLEAR");
        clear_bt.setPreferredSize(new java.awt.Dimension(75, 25));
        clear_bt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clear_btActionPerformed(evt);
            }
        });

        Print_bt.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        Print_bt.setText("PRINT");
        Print_bt.setPreferredSize(new java.awt.Dimension(75, 71));
        Print_bt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Print_btActionPerformed(evt);
            }
        });

        Update_bt.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        Update_bt.setText("UPDATE");
        Update_bt.setPreferredSize(new java.awt.Dimension(75, 71));
        Update_bt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Update_btActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1397, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(KembaliMenu_bt, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Print_bt, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(Update_bt, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(delete_bt, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(539, 539, 539)
                        .addComponent(cari_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cari_bt, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(clear_bt, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(63, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(cari_bt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                    .addComponent(cari_txt, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(clear_bt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 543, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(delete_bt, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(KembaliMenu_bt, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Update_bt, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Print_bt, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(52, 52, 52))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    private void KembaliMenu_btActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KembaliMenu_btActionPerformed
        OptionMenu optionMenu = new OptionMenu();
        optionMenu.setVisible(true);
        this.getDesktopPane().add(optionMenu);
        this.dispose();
    }//GEN-LAST:event_KembaliMenu_btActionPerformed
    
    private String selectedNik;
    
    private void cari_btActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cari_btActionPerformed
        if(cari_txt.getText().isEmpty()){
            JOptionPane.showMessageDialog(rootPane, "Masukan data yang ingin dicari", "Error", JOptionPane.ERROR_MESSAGE);
            showTable(sql);
        }else{
            //Code Mencari nama dan nik
            String searchText = cari_txt.getText();
            String query = "SELECT * FROM anak WHERE nama LIKE '%" + searchText + "%' OR nik LIKE '%" + searchText + "%'";
            showTable(query);
        }
    }//GEN-LAST:event_cari_btActionPerformed

    private void clear_btActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clear_btActionPerformed
        cari_txt.setText("");
        showTable(sql);
    }//GEN-LAST:event_clear_btActionPerformed

    private void delete_btActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delete_btActionPerformed
        DefaultTableModel tb1Model = (DefaultTableModel) TabelDataAnak_tab.getModel();
        if(TabelDataAnak_tab.getSelectedRowCount()==1){
             int dialogResult = JOptionPane.showConfirmDialog(this, "Apakah Anda yakin ingin menghapus data ini?", "Konfirmasi Hapus Data", JOptionPane.YES_NO_OPTION);
             if (dialogResult == JOptionPane.YES_OPTION){
                int selectedRow = TabelDataAnak_tab.getSelectedRow();
                String nik = tb1Model.getValueAt(selectedRow, 1).toString(); // Mengambil nilai NIK dari baris yang dipilih
                tb1Model.removeRow(selectedRow);
                deleteDataFromDatabase(nik); // Panggil metode untuk menghapus data dari database
            }
        }else{
            if(TabelDataAnak_tab.getRowCount()==0){
                JOptionPane.showMessageDialog(this,"Tabel kosong");
            }else{
                JOptionPane.showMessageDialog(this, "Mohon pilih baris yang ingin di hapus");
            }
        }
    }//GEN-LAST:event_delete_btActionPerformed

    private void Print_btActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Print_btActionPerformed
        String jdbc_driver = "com.mysql.cj.jdbc.Driver";
        String user = "root";
        String pass = "";
        String url = "jdbc:mysql://localhost:3306/pbo_aplikasi_kesehatan";
        File reportFile = new File(".");
        String dirr = "";
        
        try{
            Class.forName(jdbc_driver);
            Connection conn = (Connection) DriverManager.getConnection(url, user, pass);
            Statement stat = conn.createStatement();
            String sql = "SELECT * FROM anak";
            dirr = reportFile.getCanonicalPath() + "/src/Data/";
            JasperDesign design = JRXmlLoader.load(dirr + "ANAK.jrxml");
            JasperReport jr = JasperCompileManager.compileReport(design);
            ResultSet rs = stat.executeQuery(sql);
            JRResultSetDataSource rsDataSource = new JRResultSetDataSource(rs);
            JasperPrint jp = JasperFillManager.fillReport(jr, new HashMap(), rsDataSource);
            JasperViewer.viewReport(jp);
        }catch(ClassNotFoundException | SQLException | IOException | JRException ex){
            JOptionPane.showMessageDialog(null, "\nGagal Mencetak\n" + ex, "Error", JOptionPane.ERROR_MESSAGE);
        }      
    }//GEN-LAST:event_Print_btActionPerformed

    private void Update_btActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Update_btActionPerformed
        int selectedRow = TabelDataAnak_tab.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Mohon pilih baris yang ingin diupdate");
        } else {
            // Tampilkan konfirmasi dialog
            int dialogResult = JOptionPane.showConfirmDialog(this, "Apakah Anda memilih data ini?", "Konfirmasi Data", JOptionPane.YES_NO_OPTION);
            if (dialogResult == JOptionPane.YES_OPTION) {
                // Ambil nilai nik dari baris yang dipilih
                selectedNik = TabelDataAnak_tab.getValueAt(selectedRow, 1).toString();
                
                // Panggil metode untuk mengambil data dari database berdasarkan nik
                fetchDataFromDatabase(selectedNik);
            }
        }
    }//GEN-LAST:event_Update_btActionPerformed
    
    private void fetchDataFromDatabase(String nik) {
        try {
            Connection conn = ConnectionDB.connectDatabase();
            String query = "SELECT * FROM anak WHERE nik = ?";
            PreparedStatement pstmt = conn.prepareStatement(query);
            pstmt.setString(1, nik);
            ResultSet rs = pstmt.executeQuery();
            
            if (rs.next()) {
                String nama = rs.getString("nama");
                String umur = rs.getString("umur");
                java.util.Date tanggalLahir = rs.getDate("tanggal_lahir");
                String bapak = rs.getString("bapak");
                String ibu = rs.getString("ibu");
                String alamat = rs.getString("alamat");
                String jk = rs.getString("jk");
                String riwayatImunisasi = rs.getString("riwayat_imunisasi");
                
                // Tampilkan data ke form DataAnakForm
                DataAnakForm dataAnakForm = new DataAnakForm();
                dataAnakForm.setFields(nama, nik, umur, tanggalLahir, bapak, ibu, alamat, jk, riwayatImunisasi);
                dataAnakForm.setVisible(true);
                getDesktopPane().add(dataAnakForm);
                dispose();
            }
            
            rs.close();
            pstmt.close();
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(TableAnakForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void showTable(String sql){
        try{
            Statement stat = (Statement)ConnectionDB.connectDatabase().createStatement();
            ResultSet rs = stat.executeQuery(sql);
            DefaultTableModel tableModel;
            tableModel = (DefaultTableModel)TabelDataAnak_tab.getModel();
            tableModel.getDataVector().removeAllElements();
            while(rs.next()){
                tableModel.addRow(new Object[]{
                    rs.getString(1),rs.getString(2),rs.getString(3),
                    rs.getString(4),rs.getString(5),rs.getString(6),
                    rs.getString(7),rs.getString(8),rs.getString(9)
                });
            }
        }catch(SQLException ex){
            Logger.getLogger(TableAnakForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void deleteDataFromDatabase(String nik){
        Connection conn = ConnectionDB.connectDatabase();
        String sql = "DELETE FROM anak WHERE nik = ?";
        try(PreparedStatement statement = conn.prepareStatement(sql)){
            statement.setString(1, nik);
            int rowsDeleted = statement.executeUpdate();
            if (rowsDeleted > 0) {
                JOptionPane.showMessageDialog(this, "Data berhasil dihapus dari database");
            } else {
                JOptionPane.showMessageDialog(this, "Gagal menghapus data dari database");
            }
        }catch (SQLException ex){
        Logger.getLogger(TableAnakForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton KembaliMenu_bt;
    private javax.swing.JButton Print_bt;
    private javax.swing.JTable TabelDataAnak_tab;
    private javax.swing.JButton Update_bt;
    private javax.swing.JButton cari_bt;
    private javax.swing.JTextField cari_txt;
    private javax.swing.JButton clear_bt;
    private javax.swing.JButton delete_bt;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
